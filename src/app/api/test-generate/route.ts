import { NextRequest, NextResponse } from 'next/server'
import { GoogleGenerativeAI } from '@google/generative-ai'

export async function POST(request: NextRequest) {
  try {
    const { prompt, aspectRatio = '1:1' } = await request.json()

    if (!prompt) {
      return NextResponse.json(
        { success: false, error: 'Prompt é obrigatório' },
        { status: 400 }
      )
    }

    // Usar API key do Gemini direto do .env.local
    const apiKey = process.env.GEMINI_API_KEY
    
    if (!apiKey) {
      return NextResponse.json(
        { success: false, error: 'Gemini API key não configurada no servidor' },
        { status: 500 }
      )
    }

    console.log('Using Gemini API key:', apiKey.substring(0, 15) + '...')

    try {
      const genAI = new GoogleGenerativeAI(apiKey)
      const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' })
      
      const startTime = Date.now()
      
      // Gerar imagem com Gemini 2.5 Flash Image
      const result = await model.generateContent([prompt])
      const response = result.response
      const candidates = response.candidates
      
      if (!candidates || candidates.length === 0) {
        throw new Error('No image candidates generated by Gemini')
      }

      // Procurar por dados de imagem na resposta
      let imageUrl: string | undefined
      let imageData: string | undefined

      for (const candidate of candidates) {
        for (const part of candidate.content.parts) {
          if (part.inlineData?.data) {
            // Dados de imagem inline (base64)
            const mimeType = part.inlineData.mimeType || 'image/png'
            imageData = part.inlineData.data
            imageUrl = `data:${mimeType};base64,${imageData}`
            break
          }
        }
        if (imageUrl) break
      }

      if (!imageUrl) {
        throw new Error('No image data found in Gemini response')
      }
      
      const generationTime = Date.now() - startTime

      return NextResponse.json({
        success: true,
        imageUrl,
        metadata: {
          model: 'gemini-2.5-flash-image-preview',
          generationTime,
          cost: 0,
          description: prompt
        }
      })

    } catch (geminiError: any) {
      console.error('Gemini API error:', geminiError)
      return NextResponse.json({
        success: false,
        error: `Gemini API: ${geminiError.message}`
      }, { status: 500 })
    }

  } catch (error: any) {
    console.error('Test generate API error:', error)
    return NextResponse.json({
      success: false,
      error: `Server error: ${error.message}`
    }, { status: 500 })
  }
}